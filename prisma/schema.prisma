generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model articles {
  id                                                                      Int                   @id @default(autoincrement())
  url_id                                                                  String                @unique @db.VarChar(255)
  user_id                                                                 Int?
  title                                                                   String                @db.VarChar(255)
  type                                                                    String                @db.VarChar(50)
  created_at                                                              DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                                                              DateTime?             @default(now()) @db.Timestamp(6)
  image_url                                                               String?               @db.VarChar(255)
  users                                                                   users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  articles_references_articles_references_referenced_article_idToarticles articles_references[] @relation("articles_references_referenced_article_idToarticles")
  articles_references_articles_references_source_article_idToarticles     articles_references[] @relation("articles_references_source_article_idToarticles")
  characters                                                              characters[]
  comments                                                                comments[]
  histories                                                               histories[]
  items                                                                   items[]
  locations                                                               locations[]

  @@index([title], map: "idx_article_title")
  @@index([type], map: "idx_article_type")
  @@index([url_id], map: "idx_article_url_id")
}

model articles_references {
  id                                                           Int       @id @default(autoincrement())
  source_article_id                                            Int?
  referenced_article_id                                        Int?
  articles_articles_references_referenced_article_idToarticles articles? @relation("articles_references_referenced_article_idToarticles", fields: [referenced_article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  articles_articles_references_source_article_idToarticles     articles? @relation("articles_references_source_article_idToarticles", fields: [source_article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([source_article_id, referenced_article_id], map: "idx_article_references_unique")
  @@unique([source_article_id, referenced_article_id], map: "unique_reference")
}

model characters {
  id                   Int                    @id @default(autoincrement())
  article_id           Int?
  name                 String                 @db.VarChar(255)
  description          String?
  background           String?
  role                 String?                @db.VarChar(255)
  articles             articles?              @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  characters_locations characters_locations[]

  @@index([article_id], map: "idx_character_article_id")
}

model characters_locations {
  id           Int         @id @default(autoincrement())
  character_id Int?
  location_id  Int?
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations    locations?  @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([character_id], map: "idx_character_location_character_id")
  @@index([location_id], map: "idx_character_location_location_id")
}

model comments {
  id         Int       @id @default(autoincrement())
  article_id Int?
  user_id    Int?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  articles   articles? @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([article_id], map: "idx_comment_article_id")
  @@index([user_id], map: "idx_comment_user_id")
}

model histories {
  id                 Int       @id @default(autoincrement())
  article_id         Int?
  content            String
  historical_context String?
  articles           articles? @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([article_id], map: "idx_history_article_id")
}

model items {
  id              Int               @id @default(autoincrement())
  article_id      Int?
  name            String            @db.VarChar(255)
  description     String?
  usage           String?
  origin          String?
  articles        articles?         @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items_locations items_locations[]

  @@index([article_id], map: "idx_item_article_id")
}

model items_locations {
  id          Int        @id @default(autoincrement())
  item_id     Int?
  location_id Int?
  items       items?     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations   locations? @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_location_item_id")
  @@index([location_id], map: "idx_item_location_location_id")
}

model locations {
  id                      Int                    @id @default(autoincrement())
  article_id              Int?
  name                    String                 @db.VarChar(255)
  description             String?
  historical_significance String?
  latitude                Decimal?               @db.Decimal(9, 6)
  longitude               Decimal?               @db.Decimal(9, 6)
  characters_locations    characters_locations[]
  items_locations         items_locations[]
  articles                articles?              @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([article_id], map: "idx_location_article_id")
}

model sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  session_token String    @unique @db.VarChar(255)
  expires_at    DateTime  @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_sessions_user_id")
}

model users {
  id            Int        @id @default(autoincrement())
  username      String     @unique @db.VarChar(255)
  email         String     @unique @db.VarChar(255)
  password_hash String     @db.VarChar(255)
  role          String     @db.VarChar(50)
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at    DateTime?  @default(now()) @db.Timestamp(6)
  articles      articles[]
  comments      comments[]
  sessions      sessions[]

  @@index([email], map: "idx_user_email")
  @@index([username], map: "idx_user_username")
}
